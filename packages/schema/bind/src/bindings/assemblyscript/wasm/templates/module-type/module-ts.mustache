import * as Types from "..";

{{> serialization_imports}}

import {
{{#methods}}
  deserialize{{name}}Args,
  serialize{{name}}Result{{^last}},{{/last}}
{{/methods}}
} from "./serialization";

import {
  wrap_invoke_args,
  wrap_invoke_result,
  wrap_invoke_error,
  wrap_load_env,
  InvokeArgs,
} from "@polywrap/wasm-as";

export abstract class IModule {
  {{#hasEnv}}private __env__: Types.Env | null = null;

  public get env(): Types.Env {
    if (this.__env__ === null) {
      throw new Error("Environment is not set, and it is required by this module");
    }
    return this.__env__ as Types.Env;
  }

  public __setEnv__(env: Types.Env): void {
    this.__env__ = env;
  }
  {{/hasEnv}}

  {{#methods}}
  abstract {{#detectKeyword}}{{name}}{{/detectKeyword}}(
    args: Types.Args_{{#detectKeyword}}{{name}}{{/detectKeyword}}
  ): {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}};
  {{^last}}

  {{/last}}
  {{/methods}}
}